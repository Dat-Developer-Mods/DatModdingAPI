plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
}

group = 'com.datdeveloper'
version = "${minecraft_version}-${mod_version}"

java {
    archivesBaseName = 'datmoddingapi'
    toolchain.languageVersion = JavaLanguageVersion.of(17)

    withJavadocJar()
    withSourcesJar()
}

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraft_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "datmoddingapi" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'datmoddingapi'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'datmoddingapi'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'datmoddingapi'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'datmoddingapi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'sponge-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation 'org.spongepowered:spongeapi:9.0.0'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_version: mod_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "datmoddingapi",
                "Specification-Vendor"    : "jtljac",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "jtljac",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = project.name
                description = 'A modding library for DatDeveloper'
                url = 'https://datdeveloper.com/datmoddingapi'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jtljac/DatModdingAPI/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jtljac'
                        name = 'Jacob Lucas'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com.com/dat-developer-mods/datmoddingapi.git'
                    developerConnection = 'scm:git:ssh://github.com/dat-developer-mods/datmoddingapi.git'
                    url = 'https://datdeveloper.com/datmoddingapi/'
                }

                withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if(dep.artifactId.last().value().last() == "forge") {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "Dat-Maven-Repo"
            url = "https://maven.datdeveloper.com/releases"
            credentials {
                username = System.env.MAVENREPOUSER
                password = System.env.MAVENREPOPASS
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}